<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Program">   

   	
   	<select id="readProgram" resultType="ProgramRead">
	   select P.id, A.name as name, C.category_name as category_name, P.program_name, P.status, P.quota, P.regdate,
	   P.apply_status, P.start_date, P.end_date , P.Applystart_date, P.Applyend_date , P.manager_name, 
	   P.manager_contact, P.applicants_num,P.apply_status, PF.file_name,
	   		case
            when (P.apply_status = 0) then '대기'
            when (P.apply_status =1) then '진행'
        	else '마감'
			end as status_name
			
		FROM swap.Program as P
		LEFT JOIN swap.Category as C  
		ON P.category_id = C.id
		LEFT JOIN swap.Admin as A
		ON P.admin_id = A.id
		LEFT JOIN swap.Program_File as PF
        ON P.id = PF.program_id AND PF.file_type != 0 OR PF.file_type IS NULL
		where P.deldate is null 
		order by P.regdate desc;
   	</select>
   	
   	
   	  <select id="readByCategory" parameterType="Integer" resultType="ProgramRead">
   	  select P.id, A.name as name, P.program_name, C.category_name, P.category_id, P.quota, 
   	  P.information, P.status,  P.apply_status, P.start_date, P.end_date, P.Applystart_date, 
   	  P.Applyend_date , P.manager_name, P.manager_contact, P.applicants_num, PF.file_name,
   	  		case
            when (P.apply_status = 0) then '대기'
            when (P.apply_status=1) then '진행'
        	else '마감'
			end as status_name
		FROM Program AS P
		LEFT JOIN Category as C
		ON P.category_id = C.id
		LEFT JOIN swap.Admin as A
		ON P.admin_id = A.id
		LEFT JOIN swap.Program_File as PF
        ON P.id = PF.program_id AND PF.file_type != 0 OR PF.file_type IS NULL
		where  P.deldate is null AND C.id =  #{category_id} 
		order by P.regdate desc;
	
   	</select>
   	
   	 <select id="readByStatusByUser" parameterType="hashmap" resultType="ProgramReadByUser">
   	  select  A.id as applicant_id, P.id as program_id, P.program_name,P.start_date,  P.survey_form, P.end_date, A.status,P.status as program_status,C.category_name, case
            when (A.status = 0) then '참여보류'
            when (A.status=1) then '참여승인'
            when (A.status=2) then '참여불가'
            when (A.status=3) then '미수료'
        else '수료'
	end as status_name
	FROM Applicant AS A
	LEFT JOIN Program P on P.id = A.program_id
	LEFT JOIN Category C ON P.category_id = C.id
	where P.deldate is null AND P.status = #{status} AND A.user_id=#{user_id}
	order by A.regdate desc;
	
   	</select>
   	
   	
   	<select id="readByStatusCompleteByUser" parameterType="hashmap" resultType="ProgramReadByUser">
   	   select  A.id as applicant_id, P.id as program_id, P.program_name,P.start_date,  P.survey_form, P.end_date, A.status,P.status as program_status,C.category_name, case
            when (A.status = 0) then '참여보류'
            when (A.status=1) then '참여승인'
            when (A.status=2) then '참여불가'
            when (A.status=3) then '미수료'
        else '수료'
	end as status_name, case
                    when (length(P.survey_form) = 2) then -2
                     when (A.survey_form is null) then 1
            else -1
            end as confirm_survey
	FROM Applicant AS A
	LEFT JOIN Program P on P.id = A.program_id
	LEFT JOIN Category C ON P.category_id = C.id
	where P.deldate is null AND P.status = 2 AND A.user_id=13
	order by A.regdate desc;
	
   	</select>
   	
   	<select id="readApplicationByProgram" parameterType="Integer" resultType="ProgramRead">
   	select P.application_form, P.status, P.applicants_num 
   	from Program as P
   	where P.id = #{program_id}
   	</select>
   	
   	<select id="readSurveyByProgram" parameterType="Integer" resultType="ProgramRead">
   	select P.survey_form, P.status, P.applicants_num 
   	from Program as P
   	where P.id = #{program_id}
   	</select>
   	
   		<select id="selectConfirmOngoing" parameterType="Integer" resultType="Integer">
	   select case when(P.status = 1) then 1
		else 0
		end
		from Program as P
		where P.id =#{id};
   	</select>
   	
   	 <select id="selectConfirmApply" parameterType="Integer" resultType="Integer">
   	select case when (P.applicants_num > 0) then 1
	else 0
	end
	from Program as P
	where P.id = #{id};
		</select>
   	
   	
   	<select id="readProgramInformationByProgramId" parameterType="Integer" resultType="ProgramReadById">
	   select P.id, P.program_name,P.category_id, C.category_name as category_name, P.quota, P.information, 
	   P.start_date, P.end_date, P.Applystart_date, P.Applyend_date, P.manager_name, P.manager_contact, P.application_form, 
	   P.applicants_num, P.status, PF.file_name, PF.file_type
		FROM Program AS P
		LEFT JOIN Category as C  
		ON P.category_id = C.id
		LEFT JOIN swap.Program_File as PF
        ON P.id = PF.program_id
		where P.id = #{id};
   	</select>
   	
   	
   	<select id="readProgramName" parameterType="Integer" resultType="ProgramReadName">
	   select P.program_name
		FROM Program AS P
		where P.id = #{id};
   	</select>
   	
   	<select id="readProgramLastId" resultType="Integer">
	    SELECT P.id
		FROM Program AS P
		ORDER BY regdate DESC LIMIT 1
   	</select>
   	
   	<insert id = "insertProgram" parameterType="Program">	
   		INSERT INTO Program (admin_id, category_id, application_form, survey_form, program_name, information, start_date, end_date, quota, Applystart_date, Applyend_date, manager_name, manager_contact)
		VALUES ((select AD.id as admin_id
		from Admin as AD
		where AD.user_id = #{admin_id}), #{category_id}, #{application_form}, #{survey_form},#{program_name}, #{information}, #{start_date}, #{end_date},#{quota}, #{Applystart_date}, #{Applyend_date},#{manager_name}, #{manager_contact})
   	</insert>
   	
   	<insert id = "insertPoster" parameterType="ProgramFile">	
   		INSERT INTO Program_File (program_id, file_name, file_type)
		VALUES (#{program_id}, #{file_name}, #{file_type})
   	</insert>
   	
   	<insert id = "insertFile" parameterType="ProgramFile">	
   		INSERT INTO Program_File (program_id, file_name, file_type)
		VALUES (#{program_id}, #{file_name}, #{file_type})
   	</insert>
   	
   	<update id="updateDelDate" parameterType="Integer">
   		UPDATE Program SET deldate=now(), status = -1
		WHERE id = #{id}
   	</update>
   	
   	<update id="updateApplicationByProgram" parameterType="hashmap">
   	 	UPDATE Program SET application_form =#{application_form}, edit_date=now()
   	 	WHERE id = #{program_id}
   	</update>
   	
   	  <update id="updateSurveyByProgram" parameterType="hashmap">
   	 	UPDATE Program SET survey_form =#{survey_form}, edit_date=now()
   	 	WHERE id = #{program_id}
   	</update>
   	
   	

   	<update id="updateStatus" parameterType="hashmap">
   		UPDATE Program SET status=#{status}
		WHERE id = #{program_id}
	</update>
	
	<update id="updateApplyStatus" parameterType="hashmap">
   		UPDATE Program SET apply_status=#{apply_status}
		WHERE id = #{program_id}
	</update>

   	<update id="edit" parameterType="Program">
   		UPDATE Program SET edit_date=now(), program_name = #{program_name}, information = #{information}, quota = #{quota}, category_id=#{category_id}, start_date=#{start_date}, end_date=#{end_date}, Applystart_date=#{Applystart_date}, Applyend_date=#{Applyend_date}, manager_name = #{manager_name}, manager_contact = #{manager_contact} 
		WHERE id = #{id}
   	</update>
   	
   	<update id="editPoster" parameterType="ProgramFile">
   		UPDATE Program_File SET file_name = #{file_name} 
		WHERE program_id = #{program_id} AND file_type = 1
   	</update>
   	
   	<update id="updateApplicantNum" parameterType="Integer">
   		UPDATE Program SET applicants_num= (select COUNT(A.id) as c
		from Applicant as A
		where A.program_id=#{program_id} and A.status!=2)
		WHERE id = #{program_id};
	</update>
	
	  	<select id="readLikedPrograms" parameterType="Integer" resultType="ProgramReadById">
	   select P.id, P.program_name,P.category_id, C.category_name as category_name, P.quota, P.information, 
	   P.start_date, P.end_date, P.Applystart_date, P.Applyend_date, P.manager_name, P.manager_contact, P.applicants_num,PF.file_name
		FROM Program AS P
		LEFT JOIN Category as C  
		ON P.category_id = C.id
		LEFT JOIN Bookmark as B  
		ON P.id = B.program_id
		LEFT JOIN swap.Program_File as PF
        ON P.id = PF.program_id AND PF.file_type != 0 OR PF.file_type IS NULL
		where B.user_id = #{user_id};
   	</select>
   	
   	
   	<delete id="deleteFiles"  parameterType="Integer">
   		DELETE FROM Program_File
   		WHERE program_id = #{program_id}
   	</delete>
   	
   	<delete id="deleteOnlyFile"  parameterType="Integer">
   		DELETE FROM Program_File
   		WHERE program_id = #{program_id} AND file_type = 0
   	</delete>
   	
   	<select id="confirmSurvey" parameterType="ProgramReadByUser" resultType="Integer">
   		select case when (COUNT(*) > 0 ) then -1
		        else 1
		        end as status
		from Applicant as A
		where A.program_id=#{program_id} and A.user_id=#{user_id}
   	</select>
   	
</mapper>

